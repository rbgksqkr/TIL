# --- 요구 사항 ---
# 인접한 모든 자리의 차이가 1 -> 계단 수 (45656)
# 0으로 시작하는 수는 계단수가 아니다.
# TODO: N이 주어질 때, 길이가 N인 계단 수가 총 몇 개?

# --- 풀이 방법 ---
# 인접한 모든 자리의 차이가 1를 dp 테이블에 저장
# i == 2: 두자리 수 => 12, 21 ... 98
# dp[i][j] : i 자릿 수일 때 끝자리가 j인 경우 계단 수
# N번째 자릿수의 K로 끝나는 계단 수의 갯수는
# 그 전단계(N-1)의 끝자리(N번째에서 보면 끝에서 두번째 숫자)가 K+1, K-1인 경우의 합
# 끝자리가 0인 경우 1만 체크
# 끝자리가 9인 경우 8만 체크
# 나머지는 앞 뒤 체크

import sys
input = sys.stdin.readline

n = int(input())
dp = [[0 for _ in range(10)] for _ in range(n+1)]

for i in range(1, 10):  # 한 자릿수는 1부터 9까지 계단 수
    dp[1][i] = 1

for i in range(2, n+1):
    dp[i][0] = dp[i-1][1]
    dp[i][9] = dp[i-1][8]
    for j in range(1, 9):
        dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1]
print(sum(dp[n]) % 1000000000)
